(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{130:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),i=(n(0),n(139)),o={id:"cloud-resources",title:"Cloud Resources"},c={unversionedId:"xks/developer-guide/cloud-resources",id:"xks/developer-guide/cloud-resources",isDocsHomePage:!1,title:"Cloud Resources",description:"Sometimes applications will need to integrate with other cloud resources as they require things like persistent data storage. When working with XKS",source:"@site/docs/xks/developer-guide/cloud-resources.md",slug:"/xks/developer-guide/cloud-resources",permalink:"/docs/xks/developer-guide/cloud-resources",editUrl:"https://github.com/xenitab/xenitab.github.io/edit/main/docs/xks/developer-guide/cloud-resources.md",version:"current",sidebar:"docs",previous:{title:"Linkerd",permalink:"/docs/xks/developer-guide/linkerd"},next:{title:"Overview",permalink:"/docs/xks/operator-guide/index"}},s=[{value:"Authentication",id:"authentication",children:[{value:"Azure",id:"azure",children:[]},{value:"AWS",id:"aws",children:[]}]},{value:"Resource Creation",id:"resource-creation",children:[]}],u={rightToc:s};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Sometimes applications will need to integrate with other cloud resources as they require things like persistent data storage. When working with XKS\neach namespace is accompanied by a Azure resource group or a AWS account. This is where cloud resources can be created by each tenant. To keep things\nsimple it may be a good idea to not share these resources across multiple tenants, as one of the tenants has to own the resource. Instead look at\nother options like exposing an API inside the cluster instead."),Object(i.b)("h2",{id:"authentication"},"Authentication"),Object(i.b)("p",null,"As many things the authentication methods differ when running XKS in Azure and AWS. This is because the APIs and underlying authentication methods\ndiffer greatly. It is important to take this into consideration when reading these documentation."),Object(i.b)("h3",{id:"azure"},"Azure"),Object(i.b)("p",null,"The reccomended way to authenticate towards Azure in XKS is to make use of ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/Azure/aad-pod-identity"}),"AAD Pod Identity")," which runs\ninside the cluster. AAD Pod Identity allows Pods within the cluster to use ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview"}),"managed identities"),"\nto authenticate towards Azure. This removes the need for static credentials that have to be passed to the Pods. It works by intercepting API requests\nbefore the leave the cluster and will attach the correct credential based on the Pod source of the request."),Object(i.b)("p",null,"Each tenant namespace comes preconfigured with an ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://azure.github.io/aad-pod-identity/docs/concepts/azureidentity/"}),"AzureIdentity")," and\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://azure.github.io/aad-pod-identity/docs/concepts/azureidentitybinding/"}),"AzureIdentityBinding"),". These have been setup so that the identity has\naccess to the tenants resource group. All that has to be done to enable the managed identity is to add the label ",Object(i.b)("inlineCode",{parentName:"p"},"foo")," to the Pod. The preconfigured\nAzureIdentity has a labelselector which expects the label to have the same value as the namespace name."),Object(i.b)("p",null,"This example will deploy a Pod with the Azure CLI so that you can test access to the Azure API."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),"apiVersion: v1\nkind: Pod\nmetadata:\n  name: msi-test\n  labels:\n    aadpodidbinding: ${NAMESPACE_NAME}\nspec:\n  containers:\n  - name: msi-test\n    image: mcr.microsoft.com/azure-cli\n    tty: true\n    volumeMounts:\n      - name: az-cli\n        mountPath: /root/.azure\n  volumes:\n    - name: az-cli\n      emptyDir: {}\n\n")),Object(i.b)("p",null,"After the Pod has started you can execute a shell in the Pod and verify that the managed identity is working."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"az login --identity\naz account show\n")),Object(i.b)("h4",{id:"sdk-configuration"},"SDK Configuration"),Object(i.b)("p",null,"A more realistic scenario is an internally developed application needs to access an Azure resources. In these cases the best solution is to use the\nlanguage specific SDKs which will most of the time support MSI credentials. Below are examples for how to create a client using MSI credentials that\ncan interact with Azure storage account blobs."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"}," Golang ")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-golang"}),'package main\n\nimport (\n    "time"\n\n  "github.com/Azure/go-autorest/autorest/azure/auth"\n    blob "github.com/Azure/azure-storage-blob-go/azblob"\n)\n\nfunc main() {\n  msiConfig := auth.NewMSIConfig()\n\n  spt, err := msiConfig.ServicePrincipalToken()\n  if err != nil {\n    return nil, err\n  }\n  if err := spt.Refresh(); err != nil {\n    return nil, err\n  }\n\n  tc, err := blob.NewTokenCredential(spt.Token().AccessToken, func(tc blob.TokenCredential) time.Duration {\n    err := spt.Refresh()\n    if err != nil {\n      return 30 * time.Second\n    }\n    tc.SetToken(spt.Token().AccessToken)\n    return spt.Token().Expires().Sub(time.Now().Add(2 * time.Minute))\n  }), nil\n}\n')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"}," C# ")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-c#"}),'using Azure;\nusing Azure.Identity;\nusing Azure.Storage.Blobs;\n\nasync static Task CreateBlockBlobAsync(string accountName, string containerName, string blobName)\n{\n    string containerEndpoint = string.Format("https://{0}.blob.core.windows.net/{1}",\n                                                accountName,\n                                                containerName);\n    BlobContainerClient containerClient = new BlobContainerClient(new Uri(containerEndpoint),\n                                                                    new DefaultAzureCredential());\n}\n')),Object(i.b)("h4",{id:"limiting-permissions"},"Limiting Permissions"),Object(i.b)("p",null,"TBD"),Object(i.b)("h3",{id:"aws"},"AWS"),Object(i.b)("p",null,"TBD"),Object(i.b)("h2",{id:"resource-creation"},"Resource Creation"),Object(i.b)("p",null,"TBD"))}l.isMDXComponent=!0},139:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),l=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),b=r,h=d["".concat(o,".").concat(b)]||d[b]||p[b]||i;return n?a.a.createElement(h,c(c({ref:t},u),{},{components:n})):a.a.createElement(h,c({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var u=2;u<i;u++)o[u]=n[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);