(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{126:function(e,r,t){"use strict";t.d(r,"a",(function(){return d})),t.d(r,"b",(function(){return f}));var n=t(0),a=t.n(n);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),l=function(e){var r=a.a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},d=function(e){var r=l(e.components);return a.a.createElement(s.Provider,{value:r},e.children)},b={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},p=a.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=l(t),p=n,f=d["".concat(o,".").concat(p)]||d[p]||b[p]||i;return t?a.a.createElement(f,c(c({ref:r},s),{},{components:t})):a.a.createElement(f,c({ref:r},s))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=p;var c={};for(var u in r)hasOwnProperty.call(r,u)&&(c[u]=r[u]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},127:function(e,r,t){"use strict";t.r(r);var n=t(0),a=t(21);r.default=function(){var e=Object(n.useContext)(a.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},130:function(e,r,t){"use strict";t.d(r,"b",(function(){return i})),t.d(r,"a",(function(){return o}));var n=t(127),a=t(131);function i(){var e=Object(n.default)().siteConfig,r=(e=void 0===e?{}:e).baseUrl,t=void 0===r?"/":r,i=e.url;return{withBaseUrl:function(e,r){return function(e,r,t,n){var i=void 0===n?{}:n,o=i.forcePrependBaseUrl,c=void 0!==o&&o,u=i.absolute,s=void 0!==u&&u;if(!t)return t;if(t.startsWith("#"))return t;if(Object(a.b)(t))return t;if(c)return r+t;var l=t.startsWith(r)?t:r+t.replace(/^\//,"");return s?e+l:l}(i,t,e,r)}}}function o(e,r){return void 0===r&&(r={}),(0,i().withBaseUrl)(e,r)}},131:function(e,r,t){"use strict";function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!n(e)}t.d(r,"b",(function(){return n})),t.d(r,"a",(function(){return a}))},81:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return c})),t.d(r,"metadata",(function(){return u})),t.d(r,"rightToc",(function(){return s})),t.d(r,"default",(function(){return d}));var n=t(3),a=t(7),i=(t(0),t(126)),o=t(130),c={id:"index",title:"Overview"},u={unversionedId:"services/xks/index",id:"services/xks/index",isDocsHomePage:!1,title:"Overview",description:"Xenit Kubernetes Service (XKS) is a oppinionated standerdized Kubernetes deployment on Azure. It combines AKS and other",source:"@site/docs/services/xks/index.md",slug:"/services/xks/index",permalink:"/docs/services/xks/index",editUrl:"https://github.com/xenitab/xenitab.github.io/edit/main/docs/services/xks/index.md",version:"current",sidebar:"docs",previous:{title:"OPA Blast Radius",permalink:"/docs/documentation/kubernetes/blast-radius"},next:{title:"Operator Guide",permalink:"/docs/services/xks/operator-guide"}},s=[{value:"Architecture",id:"architecture",children:[]},{value:"Core",id:"core",children:[]},{value:"Governance",id:"governance",children:[]},{value:"Hub",id:"hub",children:[]},{value:"AKS",id:"aks",children:[]}],l={rightToc:s};function d(e){var r=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,t,{components:r,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://xenit.se/it-tjanster/kubernetes-service/"}),"Xenit Kubernetes Service")," (XKS) is a oppinionated standerdized Kubernetes deployment on Azure. It combines AKS and other\nAzure services with additional configuration and services that run ontop of AKS."),Object(i.b)("h2",{id:"architecture"},"Architecture"),Object(i.b)("p",null,"XKS is set up from a set of Terraform modules that when combined creates the full XKS service. There are multiple individual states that all fulfill their own purpose and build\nupon each other in a heirarchal manner. The first setup requires applying the Terraform in the correct order, but after that ordering should not matter. Separate states are used\nas it allows for a more flexible architecture that could be changed in paralell."),Object(i.b)("img",{alt:"XKS Overview",src:Object(o.a)("img/diagrams/xks-overview.drawio.jpeg")}),Object(i.b)("p",null,"The following Terraform modules are used in XKS:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"../../terraform-modules/azure/core"}),"Core")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"../../terraform-modules/azure/governance"}),"Governance")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"../../terraform-modules/azure/aks-global"}),"AKS Global")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"../../terraform-modules/azure/aks"}),"AKS")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"../../terraform-modules/kubernetes/aks-core"}),"AKS Core"))),Object(i.b)("h2",{id:"core"},"Core"),Object(i.b)("h2",{id:"governance"},"Governance"),Object(i.b)("h2",{id:"hub"},"Hub"),Object(i.b)("h2",{id:"aks"},"AKS"),Object(i.b)("p",null,"The AKS terraform contains three modules that are used to setup a Kubernetes cluster. To allow for blue/green deployments of AKS clusters resources have to be split up in to\nglobal resources that can be shared between the clusters, and cluster specific resources."),Object(i.b)("p",null,"The aks-global module contains the global resources like ACR, DNS and Azure AD configuration."),Object(i.b)("p",null,"The aks and aks-core module creates a AKS cluster and configures it. This cluster will have a suffix, normally a number to allow for temporarily creating multiple clusters\nwhen performing a blue/green deployment of the clusters. Namespaces will be created in the cluster for each of the configured tenants. Each namespaces is linked to a resource\ngroup in Azure where namespace resources are expected to be created."),Object(i.b)("img",{alt:"AKS Resource Groups",src:Object(o.a)("img/diagrams/xks-aks-rg.drawio.jpeg")}))}d.isMDXComponent=!0}}]);