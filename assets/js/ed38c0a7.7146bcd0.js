"use strict";(self.webpackChunkhome=self.webpackChunkhome||[]).push([[6990],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3919:function(e,n,t){function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!r(e)}t.d(n,{b:function(){return r},Z:function(){return a}})},4996:function(e,n,t){t.d(n,{C:function(){return o},Z:function(){return i}});var r=t(2263),a=t(3919);function o(){var e=(0,r.Z)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,t=void 0===n?"/":n,o=e.url;return{withBaseUrl:function(e,n){return function(e,n,t,r){var o=void 0===r?{}:r,i=o.forcePrependBaseUrl,s=void 0!==i&&i,l=o.absolute,u=void 0!==l&&l;if(!t)return t;if(t.startsWith("#"))return t;if((0,a.b)(t))return t;if(s)return n+t;var p=t.startsWith(n)?t:n+t.replace(/^\//,"");return u?e+p:p}(o,t,e,n)}}}function i(e,n){return void 0===n&&(n={}),(0,o().withBaseUrl)(e,n)}},9887:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=t(4996),s=["components"],l={id:"agents",title:"Agents"},u=void 0,p={unversionedId:"xks/operator-guide/agents",id:"xks/operator-guide/agents",isDocsHomePage:!1,title:"Agents",description:"It is preferable to use self hosted agents instead of using the default agents in Azure DevOps and GitHub. This is mostly for performance reasons, as the agents will most likely be faster, enable",source:"@site/docs/xks/operator-guide/agents.md",sourceDirName:"xks/operator-guide",slug:"/xks/operator-guide/agents",permalink:"/docs/xks/operator-guide/agents",editUrl:"https://github.com/xenitab/xenitab.github.io/edit/main/docs/xks/operator-guide/agents.md",tags:[],version:"current",frontMatter:{id:"agents",title:"Agents"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/xks/operator-guide/getting-started"},next:{title:"Networking",permalink:"/docs/xks/operator-guide/networking"}},c=[{value:"Governance",id:"governance",children:[],level:2},{value:"VM Image",id:"vm-image",children:[],level:2},{value:"Pre Setup",id:"pre-setup",children:[{value:"GitHub",id:"github",children:[],level:3}],level:2},{value:"Terraform",id:"terraform",children:[],level:2},{value:"Post Setup",id:"post-setup",children:[{value:"Azure DevOps",id:"azure-devops",children:[{value:"Service Connections",id:"service-connections",children:[],level:4},{value:"Agent Pool",id:"agent-pool",children:[],level:4},{value:"Billing",id:"billing",children:[],level:4}],level:3}],level:2},{value:"Peering Configuration",id:"peering-configuration",children:[],level:2}],d={toc:c};function m(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"It is preferable to use self hosted agents instead of using the default agents in Azure DevOps and GitHub. This is mostly for performance reasons, as the agents will most likely be faster, enable\nrunning multiple jobs and cache container images. Currently agents for Azure DevOps and GitHub are supported, more may come in the future."),(0,o.kt)("p",null,"The setup of agents relies on the hub module. The hub module is used to create a central VNET that can be peered to multiple other VNETs. One important detail when running agents is that they should\nbe located in the production subscription if no other shared subscription exists. The agents expects that there is a hub VNET that can be used by the agents. The VNET is then peered to all other\nenvironments vnets to limit the need to expose things to the public internet."),(0,o.kt)("p",null,"To configure the agents we need to run a few steps in a specific order."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create resource groups in governance"),(0,o.kt)("li",{parentName:"ul"},"Run Packer to create the VM images"),(0,o.kt)("li",{parentName:"ul"},"Create the agent resources"),(0,o.kt)("li",{parentName:"ul"},"Add the agents to the git provider"),(0,o.kt)("li",{parentName:"ul"},"Peering configuration both ways in hub and core")),(0,o.kt)("h2",{id:"governance"},"Governance"),(0,o.kt)("p",null,"The first step is to create the resource groups for the hub and agents. In the governance Terraform two resource groups have to be added to the ",(0,o.kt)("inlineCode",{parentName:"p"},"common.tfvars")," file in the variables directory. The hub\nresource group has to be created for both Azure DevOps and GitHub, the only difference is the name of the resource group where the agents are located."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'  {\n    common_name                = "hub",\n    delegate_aks               = false,\n    delegate_key_vault         = true,\n    delegate_service_endpoint  = false,\n    delegate_service_principal = false,\n    lock_resource_group        = false,\n    tags = {\n      "description" = "Hub Network"\n    }\n  },\n\n# Azure DevOps\n\n  {\n    common_name                = "azpagent",\n    delegate_aks               = false,\n    delegate_key_vault         = true,\n    delegate_service_endpoint  = false,\n    delegate_service_principal = true,\n    lock_resource_group        = false,\n    tags = {\n      "description" = "Azure Pipelines Agent"\n    }\n  },\n\n# GitHub\n\n  {\n    common_name                = "ghrunner",\n    delegate_aks               = false,\n    delegate_key_vault         = true,\n    delegate_service_endpoint  = false,\n    delegate_service_principal = true,\n    lock_resource_group        = false,\n    tags = {\n      "description" = "GitHub Runner"\n    }\n  },\n')),(0,o.kt)("p",null,"The Service Principal credentials need to be stored as a secret when running Packer from GitHub. This step does not have to be followed when setting up Azure DevOps. The Service Principal id and\ncredentials can be retrieved after the Terraform has been applied. Read the ",(0,o.kt)("a",{parentName:"p",href:"./getting-started/#configure-service-principal"},"getting started guide")," for information about how to get the credential\ninformation, the difference being that the application will be named ",(0,o.kt)("inlineCode",{parentName:"p"},"sp-rg-xks-prod-ghrunner-contributor")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"az-mg-lz-xks-owner"),". The secret should be added to the repository packer, as the\nVM image only has to be built for production it is enough to create the secret ",(0,o.kt)("inlineCode",{parentName:"p"},"AZURE_CREDENTIALS_PROD"),". The format of the secret content should be as in the example below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"clientId": "00000000-0000-0000-0000-000000000000",\n  "clientSecret": "super-duper-secret-value",\n  "subscriptionId": "00000000-0000-0000-0000-000000000000",\n  "tenantId": "00000000-0000-0000-0000-000000000000"}\n')),(0,o.kt)("h2",{id:"vm-image"},"VM Image"),(0,o.kt)("p",null,"We make use of ",(0,o.kt)("a",{parentName:"p",href:"https://www.packer.io/"},"Packer")," to create the VM images. Packer allows for the automation of the process, creating the VM snapshot for us. The VM image has to be created before any VM\nimage can be created."),(0,o.kt)("p",null,"Create a repository called ",(0,o.kt)("inlineCode",{parentName:"p"},"packer")," that is going to contain the CI jobs that will build the VM images. Doing this will allow for tracking of versions and automate the complicated build process."),(0,o.kt)("p",null,"There are templates for Azure DevOps that can be used to build the VM images for the agents. The following pipeline definition should be commited to the file ",(0,o.kt)("inlineCode",{parentName:"p"},".ci/azure-pipelines-agent.yaml")," in the\nnew ",(0,o.kt)("inlineCode",{parentName:"p"},"packer")," repository. After that is done create a Azure DevOps pipeline for the given pipeline definition."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'name: $(Build.BuildId)\n\ntrigger: none\n\nresources:\n  repositories:\n    - repository: templates\n      type: git\n      name: XKS/azure-devops-templates\n      ref: refs/tags/2020.12.5\n\nstages:\n  - template: packer-docker/main.yaml@templates\n    parameters:\n      poolNameTemplate: ""\n      azureSubscriptionTemplate: "xks-{0}-owner"\n      resourceGroupTemplate: "rg-{0}-we-azpagent"\n      packerTemplateRepo: "https://github.com/XenitAB/packer-templates.git"\n      packerTemplateRepoBranch: "2021.06.1"\n      packerTemplateFile: "templates/azure/azure-pipelines-agent/azure-pipelines-agent.json"\n')),(0,o.kt)("p",null,"There is also a template for GitHub that can be used for building with Packer. The following pipeline definition should be committed to the file ",(0,o.kt)("inlineCode",{parentName:"p"},".github/workflows/github-runner.yaml")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"packer"),"\nrepository."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'name: packer_github_runner\n\non:\n  workflow_dispatch: {}\n\njobs:\n  packer:\n    uses: xenitab/azure-devops-templates/.github/workflows/packer-docker.yaml@2021.11.1\n    with:\n      ENVIRONMENTS: |\n        {\n          "environments":[\n            {"name":"prod"}\n          ]\n        }\n      RESOURCE_GROUP_NAME_SUFFIX: "ghrunner"\n      PACKER_TEMPLATE_REPO: "https://github.com/XenitAB/packer-templates.git"\n      PACKER_TEMPLATE_REPO_BRANCH: "2021.06.1"\n      PACKER_TEMPLATE_FILE: "templates/azure/azure-pipelines-agent/azure-pipelines-agent.json"\n    secrets:\n      AZURE_CREDENTIALS_PROD: ${{ secrets.AZURE_CREDENTIALS_PROD }}\n')),(0,o.kt)("p",null,"Start the Packer build pipeline and allow it to run until completion. This may take up to 40 minutes to run so give it time. Afte the build is completed a new VM image should be created and stored in the\nagent's resource group in Azure."),(0,o.kt)("p",null,"The name of the image is dynamic and includes a timestamp to allow versioning of the images. The following Azure CLI command gets the name of the image:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# Assuming that you do not have any other image this RG.\naz image list -o json --query '[0].name'\n")),(0,o.kt)("p",null,"The name should be similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"azp-agent-2021-04-09T08-18-30Z"),"."),(0,o.kt)("h2",{id:"pre-setup"},"Pre Setup"),(0,o.kt)("h3",{id:"github"},"GitHub"),(0,o.kt)("p",null,"When using GitHub Runners a GitHub application has to be created that will allow the agent to communicate back to GitHub. Follow the steps in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/XenitAB/github-runner#creating-a-github-app"},"GitHub Runner\nDocumentation")," for instructions in how to create the GitHub Application with the correct permissions. In the end you should have\ncreated and installed a GitHub Application and have an application id, installation id, and private key."),(0,o.kt)("p",null,"These parameters should all be stored in the already created Azure Key Vault in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ghrunner")," resource group. The secrets should be named ",(0,o.kt)("inlineCode",{parentName:"p"},"github-app-id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"github-private-key"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"github-installation-id"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"github-organization"),"."),(0,o.kt)("h2",{id:"terraform"},"Terraform"),(0,o.kt)("p",null,"When setting up the Terraform make sure to set the correct value for ",(0,o.kt)("inlineCode",{parentName:"p"},"azure_pipelines_agent_image_name")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"github_runner_image_name"),". If everything has been configured properly the hub VNET and VMs\nshould be created without any issues."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'module "hub" {\n  source = "github.com/xenitab/terraform-modules//modules/azure/hub?ref=2021.05.12"\n\n  environment           = var.environment\n  location_short        = var.location_short\n  subscription_name     = var.subscription_name\n  azure_ad_group_prefix = var.azure_ad_group_prefix\n  name                  = var.name\n  vnet_config           = var.vnet_config\n  peering_config        = var.peering_config\n}\n\n# Azure DevOps\n\nmodule "azpagent" {\n  source = "github.com/xenitab/terraform-modules//modules/azure/azure-pipelines-agent-vmss?ref=2021.05.12"\n\n  environment                      = var.environment\n  location_short                   = var.location_short\n  unique_suffix                    = var.unique_suffix\n  name                             = "azpagent"\n  azure_pipelines_agent_image_name = "azp-agent-2021-06-11T06-44-34Z"\n  vmss_sku                         = "Standard_F4s_v2"\n  vmss_disk_size_gb                = 64\n  vmss_subnet_config = {\n    name                 = module.hub.subnets["sn-${var.environment}-${var.location_short}-${var.name}-servers"].name\n    virtual_network_name = module.hub.virtual_networks.name\n    resource_group_name  = module.hub.resource_groups.name\n  }\n}\n\n# GitHub\n\nmodule "ghrunner" {\n  source = "github.com/xenitab/terraform-modules//modules/azure/github-runner?ref=2021.05.12"\n\n  environment              = var.environment\n  location_short           = var.location_short\n  name                     = "ghrunner"\n  github_runner_image_name = "github-runner-2020-12-07T22-06-18Z"\n  vmss_sku                 = "Standard_D2s_v3"\n  vmss_instances           = 2\n  vmss_disk_size_gb        = 50\n  unique_suffix            = var.unique_suffix\n  vmss_subnet_config = {\n    name                 = module.hub.subnets["sn-${var.environment}-${var.location_short}-${var.name}-servers"].name\n    virtual_network_name = module.hub.virtual_networks.name\n    resource_group_name  = module.hub.resource_groups.name\n  }\n}\n')),(0,o.kt)("h2",{id:"post-setup"},"Post Setup"),(0,o.kt)("p",null,"After the cloud resources have been created their respective git providers have to be configured to be aware of the agent pools. Follow the instructions below to complete the post setup."),(0,o.kt)("h3",{id:"azure-devops"},"Azure DevOps"),(0,o.kt)("p",null,"This step only has to be followed when setting up Azure DevOps Agents."),(0,o.kt)("p",null,"To be able to communicate with the VMSS we need to configure a Service Connection. You will find service connection under a random project within Azure DevOps."),(0,o.kt)("p",null,"To setup the Service Connection you need to get a secret generated by Terraform."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# Assuming that you are connected to the correct subscription\naz keyvault secret show --vault-name <vault-name> --name <secret-name> -o tsv --query value\n\n# Example\naz keyvault secret show --vault-name kv-prod-we-core-1337 --name sp-rg-xks-prod-azpagent-contributor -o tsv --query value\n")),(0,o.kt)("h4",{id:"service-connections"},"Service Connections"),(0,o.kt)("p",null,"To create a new Service connection from Azure DevOps:"),(0,o.kt)("p",null,"Project settings -> Service connections -> New service connection -> Azure Resource Manager -> Service principal (manual)"),(0,o.kt)("p",null,'{"clientId":"12345","clientSecret":"SoMuchSecret","subscriptionId":"sub-id","tenantId":"tenant-id"}'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Subscription Id = subscriptionId"),(0,o.kt)("li",{parentName:"ul"},"Service Principal Id = clientId"),(0,o.kt)("li",{parentName:"ul"},"Service principal key = clientSecret"),(0,o.kt)("li",{parentName:"ul"},"Tenant ID = tenantId"),(0,o.kt)("li",{parentName:"ul"},"Service connection name = random-name")),(0,o.kt)("h4",{id:"agent-pool"},"Agent Pool"),(0,o.kt)("p",null,"In Azure DevOps under project settings."),(0,o.kt)("p",null,"Agent pools -> Add Pool -> Pick VMSS from dropdown"),(0,o.kt)("img",{alt:"Agent image",src:(0,i.Z)("img/assets/xks/operator-guide/agent_pool.png")}),(0,o.kt)("h4",{id:"billing"},"Billing"),(0,o.kt)("p",null,"Configure billing."),(0,o.kt)("p",null,"This will increase your azure cost. Read up on how much on your own."),(0,o.kt)("p",null,"Organization Settings -> Billing"),(0,o.kt)("p",null,'Under "Self-Hosted CI/CD" set "Paid parallel jobs" = 3'),(0,o.kt)("h2",{id:"peering-configuration"},"Peering Configuration"),(0,o.kt)("p",null,"To complete the setup we need to configure the VNET peering between the new hub VNET and the environments VNETs. This enables the agents to communicate with private resources without having to egress\ninto the public Internet first."),(0,o.kt)("p",null,"In the hubs ",(0,o.kt)("inlineCode",{parentName:"p"},"prod.tfvars")," you want to add configuration to all VNETs that the VNET should have access to. If you have multiple environments there should be multiple entries in the list."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'peering_config = [\n  {\n    name                         = "core-dev"\n    remote_virtual_network_id    = "/subscriptions/your-sub-id/resourceGroups/rg-dev-we-core/providers/Microsoft.Network/virtualNetworks/vnet-dev-we-core"\n    allow_forwarded_traffic      = true\n    use_remote_gateways          = false\n    allow_virtual_network_access = true\n  },\n]\n')),(0,o.kt)("p",null,"A similar configuration has to be done in the core Terraform to complete the peering."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'peering_config = [\n  {\n    name                         = "hub"\n    remote_virtual_network_id    = "/subscriptions/your-sub-id/resourceGroups/rg-prod-we-hub/providers/Microsoft.Network/virtualNetworks/vnet-prod-we-hub"\n    allow_forwarded_traffic      = true\n    use_remote_gateways          = false\n    allow_virtual_network_access = true\n  },\n]\n')))}m.isMDXComponent=!0}}]);