"use strict";(self.webpackChunkhome=self.webpackChunkhome||[]).push([[9691],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(n),g=a,h=m["".concat(p,".").concat(g)]||m[g]||c[g]||r;return n?o.createElement(h,l(l({ref:t},u),{},{components:n})):o.createElement(h,l({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2762:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return u},assets:function(){return c},toc:function(){return m},default:function(){return h}});var o=n(3117),a=n(102),r=(n(7294),n(3905)),l=n(4996),i=["components"],p={title:"Profiling Go in Kubernetes",description:"Profiling Go in Kubernetes using Kubernetes debug.",authors:"nissessenap",tags:["pprof","kubernetes","debug"],keywords:["pprof","kubernetes","debug"]},s=void 0,u={permalink:"/blog/2022/11/21/golang-memory-dump",source:"@site/blog/2022-11-21-golang-memory-dump.md",title:"Profiling Go in Kubernetes",description:"Profiling Go in Kubernetes using Kubernetes debug.",date:"2022-11-21T00:00:00.000Z",formattedDate:"November 21, 2022",tags:[{label:"pprof",permalink:"/blog/tags/pprof"},{label:"kubernetes",permalink:"/blog/tags/kubernetes"},{label:"debug",permalink:"/blog/tags/debug"}],readingTime:5.38,truncated:!0,authors:[{name:"Edvin Norling",title:"Expert DevOps Engineer",url:"https://github.com/nissessenap",email:"edvin.norling@xenit.se",imageURL:"https://media-exp1.licdn.com/dms/image/C5603AQEtMiyg5yOAqQ/profile-displayphoto-shrink_800_800/0/1580133585786?e=1673481600&v=beta&t=SXFrHWYPkM2jpaKESqhdVIQix65MQP1slsoTBXGOmrY",key:"nissessenap"}],frontMatter:{title:"Profiling Go in Kubernetes",description:"Profiling Go in Kubernetes using Kubernetes debug.",authors:"nissessenap",tags:["pprof","kubernetes","debug"],keywords:["pprof","kubernetes","debug"]},nextItem:{title:"Improving XKS security using Starboard",permalink:"/blog/2022/05/04/starboard"}},c={authorsImageUrls:[void 0]},m=[{value:"Application",id:"application",children:[],level:2},{value:"Debug container/ephemeral container",id:"debug-containerephemeral-container",children:[],level:2},{value:"Cleanup",id:"cleanup",children:[],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2}],g={toc:m};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In Kubernetes 1.23 the new ephemeral containers API went in to beta and in 1.25 it became stable.\nEphemeral containers or debug containers as it is also known as, makes it's possible to inject a container into an already running pod without restarting it.\nThis is very useful when you want to debug your application since the ephemeral container can provide tools that you don't want in your application container."),(0,r.kt)("p",null,"In this post I thought we could go trough how to profile a running container in Kubernetes."),(0,r.kt)("h2",{id:"application"},"Application"),(0,r.kt)("p",null,"To get started lets use a very simple test ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/polarsignals/pprof-example-app-go"},"application")," written by the team over at ",(0,r.kt)("a",{parentName:"p",href:"https://www.polarsignals.com/"},"Polar Signals"),"."),(0,r.kt)("p",null,"They have been kind enough to publish a container image and a Kubernetes deployment that we will use.\nThe application is built in such a way that it will continue to use memory and the Kubernetes yaml don't contain any request nor limit so don't run this for a long time or your system will probably OOM."),(0,r.kt)("p",null,"Run the application on Kubernetes 1.23 or higher."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/polarsignals/pprof-example-app-go/main/manifests/deployment.yaml\n")),(0,r.kt)("p",null,"For starters lets have a look at the pprof http endpoint using curl.\nA simple way of doing so is to create a Kubernetes service and reach the pod from another container."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Expose the pprof deployment\nkubectl expose deployment pprof-example-app-go --port=8080\n")),(0,r.kt)("p",null,"Create a curl pod and look at the data inside our app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl run -i -t curl --image=curlimages/curl:latest /bin/sh\n")),(0,r.kt)("p",null,"You will be sent directly in to the container and you can run something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl http://pprof-example-app-go:8080/debug/pprof/allocs?debug=1\n")),(0,r.kt)("p",null,"This will show you an output that look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"heap profile: 4: 47357952 [5473: 554303632] @ heap/1048576\n1: 46882816 [1: 46882816] @ 0x697585 0x470ce1\n#   0x697584    main.allocMem+0xa4  /home/brancz/src/github.com/polarsignals/pprof-example-app-go/main.go:65\n\n1: 212992 [1: 212992] @ 0x4e3b6e 0x4e3e6c 0x6974c5 0x470ce1\n#   0x4e3b6d    log.(*Logger).Output+0x38d  /usr/local/go/src/log/log.go:180\n#   0x4e3e6b    log.Println+0x6b        /usr/local/go/src/log/log.go:329\n#   0x6974c4    main.calculateFib+0xc4      /home/brancz/src/github.com/polarsignals/pprof-example-app-go/main.go:55\n\n1: 204800 [1: 204800] @ 0x4fb68f 0x4fb256 0x503d3d 0x502c97 0x4f6d5e 0x4f6c92 0x4d22a5 0x4d2625 0x4d70b1 0x4cf3d2 0x4e3e3f 0x6974c5 0x470ce1\n#   0x4fb68e    math/big.nat.make+0x5ee     /usr/local/go/src/math/big/nat.go:69\n#   0x4fb255    math/big.nat.sqr+0x1b5      /usr/local/go/src/math/big/nat.go:595\n")),(0,r.kt)("p",null,"Sadly this output isn't the easiest to read so why not use pprof and while we are at it why not use ephemeral containers."),(0,r.kt)("h2",{id:"debug-containerephemeral-container"},"Debug container/ephemeral container"),(0,r.kt)("p",null,"My original plan for this blog post was to attach a new volume to the ephemeral container so we could save data locally and then copy it out to our client and show some nice flame graphs. But apparently it's not supported to attach volumes to the ephemeral container.\nThe ephemeral container cannot even reach the existing volumes on the pod you attach to."),(0,r.kt)("p",null,"There is an open ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/kubectl/issues/1071"},"issue")," to solve this but it's not part of the current enhancement ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/enhancements/issues/1441"},"proposal")," so this is nothing that we will see in the near future."),(0,r.kt)("p",null,"So instead I will just show how we can debug using pprof from within the container.\nSince we exposed the endpoint through a service we could of course do this from another pod as well.\nBut in general you should be very restrictive of what traffic that can reach your pprof endpoint if you expose it at all."),(0,r.kt)("p",null,"So finally time to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl debug")," command."),(0,r.kt)("p",null,"The debug command is used on a specific pod, in my case it's ",(0,r.kt)("inlineCode",{parentName:"p"},"pprof-example-app-go-7c4b6d77d-xw52p"),".\nLet's attach a standard golang container to our running pod, in this case i choose golang 1.15 to match the pprof tool with the running application."),(0,r.kt)("p",null,"Kubernetes will attach the container for you and give you a shell."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl debug -i -t pprof-example-app-go-7c4b6d77d-xw52p --image=golang:1.15-alpine3.14 -- /bin/sh\n")),(0,r.kt)("p",null,"Now we can point on localhost using pprof."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"go tool pprof http://localhost:8080/debug/pprof/allocs\n")),(0,r.kt)("p",null,"This will provide you with a pprof terminal inside the container."),(0,r.kt)("p",null,"I'm no pprof pro but there are some easy commands to get you started.\n",(0,r.kt)("inlineCode",{parentName:"p"},"top 10 -cum")," will show you the resource consumption it takes to call a function including all function it calls"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pprof"},"top 10 -cum\nShowing nodes accounting for 27.63GB, 99.80% of 27.69GB total\nDropped 26 nodes (cum <= 0.14GB)\nShowing top 10 nodes out of 17\n      flat  flat%   sum%        cum   cum%\n         0     0%     0%    25.66GB 92.69%  main.calculateFib\n   25.59GB 92.43% 92.43%    25.59GB 92.43%  math/big.nat.make (inline)\n         0     0% 92.43%    25.41GB 91.78%  github.com/polarsignals/pprof-example-app-go/fib.Fibonacci\n         0     0% 92.43%    25.41GB 91.78%  math/big.(*Int).Add\n         0     0% 92.43%    25.41GB 91.78%  math/big.nat.add\n    2.02GB  7.30% 99.73%     2.02GB  7.30%  main.allocMem\n    0.02GB 0.073% 99.80%     0.25GB  0.91%  fmt.Sprintln\n         0     0% 99.80%     0.25GB  0.91%  log.Println\n         0     0% 99.80%     0.23GB  0.84%  fmt.(*pp).doPrintln\n         0     0% 99.80%     0.23GB  0.84%  fmt.(*pp).handleMethods\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"top 10 -flat")," will show you the resource consumption it takes to call a function excluding all function it calls"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pprof"},"Active filters:\n   ignore=flat\nShowing nodes accounting for 27.66GB, 99.90% of 27.69GB total\nDropped 10 nodes (cum <= 0.14GB)\nShowing top 10 nodes out of 17\n      flat  flat%   sum%        cum   cum%\n   25.59GB 92.43% 92.43%    25.59GB 92.43%  math/big.nat.make (inline)\n    2.02GB  7.30% 99.73%     2.02GB  7.30%  main.allocMem\n    0.03GB   0.1% 99.83%     0.21GB  0.76%  math/big.nat.itoa\n    0.02GB 0.073% 99.90%     0.25GB  0.91%  fmt.Sprintln\n         0     0% 99.90%     0.23GB  0.84%  fmt.(*pp).doPrintln\n         0     0% 99.90%     0.23GB  0.84%  fmt.(*pp).handleMethods\n         0     0% 99.90%     0.23GB  0.84%  fmt.(*pp).printArg\n         0     0% 99.90%    25.41GB 91.78%  github.com/polarsignals/pprof-example-app-go/fib.Fibonacci\n         0     0% 99.90%     0.25GB  0.91%  log.Println\n         0     0% 99.90%    25.66GB 92.69%  main.calculateFib\n")),(0,r.kt)("p",null,"By looking at the output we can see that it's ",(0,r.kt)("inlineCode",{parentName:"p"},"math/big.nat.make")," that takes the most resources."),(0,r.kt)("p",null,"Just for fun I also generated a flame graph using pprof by port-forwarding to the application and running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"go tool pprof -http=: http://localhost:8080/debug/pprof/allocs\n")),(0,r.kt)("img",{alt:"pprof flame",src:(0,l.Z)("img/assets/blog/pprof_flame.png")}),(0,r.kt)("h2",{id:"cleanup"},"Cleanup"),(0,r.kt)("p",null,"To cleanup the resources we created run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl delete -f https://raw.githubusercontent.com/polarsignals/pprof-example-app-go/main/manifests/deployment.yaml\nkubectl delete svc pprof-example-app-go\nkubectl delete pod curl\n")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl debug")," command is extremely useful when you want to debug your application and you\ndon't have access to a shell or the tools that you need in your normal container."),(0,r.kt)("p",null,"It saves us from having to install unneeded applications in our container which lowers the amount of potential CVE:s and the time it takes to start your container by lower container size.\nKubectl debug isn't perfect and it won't work for all your uses cases especially since you can't use it to interact with existing volumes but it's a great start."),(0,r.kt)("p",null,"When it comes to continues profiling it's probably better to look at tool specifically written for it like ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/oss/phlare/"},"Grafana Phlare")," or ",(0,r.kt)("a",{parentName:"p",href:"https://www.parca.dev/docs/overview"},"Parca"),".\nBut using a tool like pprof locally can be a good start. Hopefully we will get time to write a blog about continues profiling in the future."))}h.isMDXComponent=!0}}]);