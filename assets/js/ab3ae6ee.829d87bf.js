"use strict";(self.webpackChunkhome=self.webpackChunkhome||[]).push([[8503],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=l(n),d=o,m=h["".concat(c,".").concat(d)]||h[d]||p[d]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5308:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return h}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),i=["components"],s={id:"containers",title:"Containers"},c=void 0,l={unversionedId:"xenit-style-guide/containers",id:"xenit-style-guide/containers",title:"Containers",description:"This page documents best practices when publishing open source applications that are meant to run in Kubernetes. Refer to the developer guide for documentation about how to run and manage applications in Kubernetes.",source:"@site/docs/xenit-style-guide/containers.md",sourceDirName:"xenit-style-guide",slug:"/xenit-style-guide/containers",permalink:"/docs/xenit-style-guide/containers",editUrl:"https://github.com/xenitab/xenitab.github.io/edit/main/docs/xenit-style-guide/containers.md",tags:[],version:"current",frontMatter:{id:"containers",title:"Containers"},sidebar:"docs",previous:{title:"EKS",permalink:"/docs/xks/operator-guide/kubernetes/eks"},next:{title:"Golang",permalink:"/docs/xenit-style-guide/golang"}},u=[{value:"Docker",id:"docker",children:[],level:2},{value:"Helm",id:"helm",children:[],level:2}],p={toc:u};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This page documents best practices when publishing open source applications that are meant to run in Kubernetes. Refer to the ",(0,a.kt)("a",{parentName:"p",href:"../xks/developer-guide/introduction"},"developer guide")," for documentation about how to run and manage applications in Kubernetes."),(0,a.kt)("h2",{id:"docker"},"Docker"),(0,a.kt)("p",null,"TBD"),(0,a.kt)("h2",{id:"helm"},"Helm"),(0,a.kt)("p",null,"Helm has since version 3.8.0 supported storing Helm charts in OCI registires. This solution has a lot of benefits over the old Helm registry and for this reason should be the only way Helm charts are published in Xenit open source projects. The Helm chart OCI artifact should have the same name as the Docker image which the application produces and share the same version number. To avoid name conflicts however the Helm chart should be prefixed with ",(0,a.kt)("inlineCode",{parentName:"p"},"helm-charts/"),". Refer to the project ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/XenitAB/node-ttl"},"node-ttl")," for an example. It has both the Docker image ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/XenitAB/node-ttl/pkgs/container/node-ttl"},"node-ttl")," and the Helm chart ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/XenitAB/node-ttl/pkgs/container/helm-charts%2Fnode-ttl"},"helm-charts/node-ttl")," stored in Github container registries."),(0,a.kt)("p",null,"Below is an GitHub action which builds and pushes a chart to GitHub container registry."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'name: release\non:\n  release:\n    types: [published]\njobs:\n  helm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone repo\n        uses: actions/checkout@v2\n      - name: Install Helm\n        uses: azure/setup-helm@v1\n      - name: Get GitHub Tag\n        id: get_tag\n        run: |\n          echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"\n      - name: Publish Helm charts\n        run: |\n          cd charts\n          helm registry login -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io\n          helm package --app-version ${{ steps.get_tag.outputs.tag }} --version ${{ steps.get_tag.outputs.tag }} node-ttl\n          helm push node-ttl-${{ steps.get_tag.outputs.tag }}.tgz oci://ghcr.io/xenitab/helm-charts\n')))}h.isMDXComponent=!0}}]);