"use strict";(self.webpackChunkhome=self.webpackChunkhome||[]).push([[8694],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2222:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),s=(n(4996),["components"]),i={id:"eks",title:"EKS"},l=void 0,u={unversionedId:"xks/operator-guide/kubernetes/eks",id:"xks/operator-guide/kubernetes/eks",title:"EKS",description:"Xenit Kubernetes Framework supports both AKS and EKS.",source:"@site/docs/xks/operator-guide/kubernetes/eks.md",sourceDirName:"xks/operator-guide/kubernetes",slug:"/xks/operator-guide/kubernetes/eks",permalink:"/docs/xks/operator-guide/kubernetes/eks",editUrl:"https://github.com/xenitab/xenitab.github.io/edit/main/docs/xks/operator-guide/kubernetes/eks.md",tags:[],version:"current",frontMatter:{id:"eks",title:"EKS"},sidebar:"docs",previous:{title:"AKS",permalink:"/docs/xks/operator-guide/kubernetes/aks"},next:{title:"Containers",permalink:"/docs/xenit-style-guide/containers"}},p=[{value:"Differences",id:"differences",children:[{value:"Repo structure",id:"repo-structure",children:[],level:3},{value:"EKS",id:"eks",children:[],level:3},{value:"IRSA",id:"irsa",children:[],level:3}],level:2},{value:"Bootstrap",id:"bootstrap",children:[],level:2},{value:"Tenants account peering",id:"tenants-account-peering",children:[],level:2},{value:"Update cluster version",id:"update-cluster-version",children:[{value:"Update the control plane using AWS CLI",id:"update-the-control-plane-using-aws-cli",children:[],level:3},{value:"Update the control plane using Terraform",id:"update-the-control-plane-using-terraform",children:[],level:3},{value:"Update the nodes",id:"update-the-nodes",children:[],level:3},{value:"Command examples",id:"command-examples",children:[],level:3}],level:2},{value:"Break glass",id:"break-glass",children:[],level:2},{value:"EKS resources",id:"eks-resources",children:[],level:2}],d={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Xenit Kubernetes Framework supports both AKS and EKS.\nIn this document we will describe how to setup XKF on EKS and how it differs from AKS."),(0,o.kt)("h2",{id:"differences"},"Differences"),(0,o.kt)("p",null,"To setup XKF using EKS you still need an Azure environment."),(0,o.kt)("p",null,"XKF is heavily relying on Azure AD (AAD) and we have developed our own tool to\nmanage access to our clusters called ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/XenitAB/azad-kube-proxy"},"azad-kube-proxy"),"."),(0,o.kt)("p",null,"Our governance solution is still fully located in Azure together with our Terraform state."),(0,o.kt)("h3",{id:"repo-structure"},"Repo structure"),(0,o.kt)("p",null,"This is how an AWS repo structure can look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 aws-core\n\u2502\xa0\xa0 \u251c\u2500\u2500 main.tf\n\u2502\xa0\xa0 \u251c\u2500\u2500 outputs.tf\n\u2502\xa0\xa0 \u251c\u2500\u2500 variables\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 common.tfvars\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 dev.tfvars\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 prod.tfvars\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 qa.tfvars\n\u2502\xa0\xa0 \u2514\u2500\u2500 variables.tf\n\u251c\u2500\u2500 aws-eks\n\u2502\xa0\xa0 \u251c\u2500\u2500 main.tf\n\u2502\xa0\xa0 \u251c\u2500\u2500 outputs.tf\n\u2502\xa0\xa0 \u251c\u2500\u2500 variables\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 common.tfvars\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 dev.tfvars\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 prod.tfvars\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 qa.tfvars\n\u2502\xa0\xa0 \u2514\u2500\u2500 variables.tf\n\u251c\u2500\u2500 azure-governance\n\u2502\xa0\xa0 \u251c\u2500\u2500 main.tf\n\u2502\xa0\xa0 \u251c\u2500\u2500 outputs.tf\n\u2502\xa0\xa0 \u251c\u2500\u2500 variables\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 common.tfvars\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 dev.tfvars\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 prod.tfvars\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 qa.tfvars\n\u2502\xa0\xa0 \u2514\u2500\u2500 variables.tf\n\u251c\u2500\u2500 global.tfvars\n")),(0,o.kt)("h3",{id:"eks"},"EKS"),(0,o.kt)("p",null,"Just like in AKS we use Calico as our CNI."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"AWS CNI does not support network policies"),(0,o.kt)("li",{parentName:"ul"},"AWS CNI heavily limits how many pods we can run on a single node"),(0,o.kt)("li",{parentName:"ul"},"We want to be consistent with AKS")),(0,o.kt)("p",null,"Just after setting up the EKS cluster we use a null_resource to first delete\nthe AWS CNI daemon set and then install calico.\nThis is all done before we add a single node to the cluster."),(0,o.kt)("p",null,"After this we add an EKS node group and Calico starts."),(0,o.kt)("h3",{id:"irsa"},"IRSA"),(0,o.kt)("p",null,"In AKS we use AAD Pod Identity to support access to Azure resources.\nWe support the same thing in EKS but use IAM roles for service accounts IRSA."),(0,o.kt)("p",null,"To make it easier to use IRSA we have developed a small terraform ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/XenitAB/terraform-modules/blob/main/modules/aws/irsa/README.md"},"module"),"."),(0,o.kt)("h2",{id:"bootstrap"},"Bootstrap"),(0,o.kt)("p",null,"By default AWS CNI limits the amount of pods that you can have on a single node.\nSince we are using Calico we do not have this limit,\nbut when setting up a default EKS environment the EKS ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/awslabs/amazon-eks-ami/blob/master/files/bootstrap.sh"},"bootstrap script"),"\ndefines a pod limit. To remove this limit we have created our own AWS launch template for our EKS node group. It sets ",(0,o.kt)("inlineCode",{parentName:"p"},"--use-max-pods false"),' and some needed Kubernetes node labels. If these labels are not set the EKS cluster is unable to "find" the nodes in the node group.'),(0,o.kt)("h2",{id:"tenants-account-peering"},"Tenants account peering"),(0,o.kt)("p",null,"In Azure we separates XKF and our tenants by using Resource Groups, in AWS we use separate accounts."),(0,o.kt)("p",null,"To setup a VPC peering you need to know the target VPC id, this creates a chicken and egg problem.\nTo workaround this problem we sadly have to run the eks/core module multiple times on both the XKF side and the tenant side."),(0,o.kt)("p",null,"Run Terraform in the following order:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"XKF core without any ",(0,o.kt)("inlineCode",{parentName:"li"},"vpc_peering_config_requester")," defined."),(0,o.kt)("li",{parentName:"ul"},"Tenant core without any ",(0,o.kt)("inlineCode",{parentName:"li"},"vpc_peering_config_accepter")," defined."),(0,o.kt)("li",{parentName:"ul"},"XKF core defines ",(0,o.kt)("inlineCode",{parentName:"li"},"vpc_peering_config_requester"),", manually getting the needed information from the tenant account."),(0,o.kt)("li",{parentName:"ul"},"Tenant core defines ",(0,o.kt)("inlineCode",{parentName:"li"},"vpc_peering_config_accepter"),", manually getting the needed information from the XKF account.")),(0,o.kt)("p",null,"Make sure that you only have one peering request open at the same time, else the accepter side will not be able to find a unique request.\nNow you should be able to see the VPC peering connected on both sides."),(0,o.kt)("h2",{id:"update-cluster-version"},"Update cluster version"),(0,o.kt)("p",null,"Updating the EKS cluster version can not be done by updating Terraform code only, it also involves the AWS CLI and kubectl. Find your EKS version to upgrade to here: ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html"},"EKS versions")),(0,o.kt)("p",null,"For further information on the AWS CLI commands used in this section, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cli/latest/reference/eks/index.html"},"AWS EKS CLI")," documentation."),(0,o.kt)("h3",{id:"update-the-control-plane-using-aws-cli"},"Update the control plane using AWS CLI"),(0,o.kt)("p",null,"Get the name of the cluster to update:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"aws eks list-clusters --region eu-west-1\n")),(0,o.kt)("p",null,"Update the control plane version by running the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"aws eks update-cluster-version --region eu-west-1 --name <cluster-name> --kubernetes-version <version>\n")),(0,o.kt)("p",null,"The above command provides an id that can be use to check the status of the update:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"aws eks describe-update --region eu-west-1 --name <cluster-name> --update-id <id>\n")),(0,o.kt)("p",null,"The update is finished when status is ",(0,o.kt)("inlineCode",{parentName:"p"},"Successful"),". Previous updates have taken approximately ",(0,o.kt)("strong",{parentName:"p"},"45 minutes"),"."),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"aws-eks/variables/<environment>.tfvars")," Terraform file that corresponds to the actual environment, update the ",(0,o.kt)("inlineCode",{parentName:"p"},"kubernetes_version")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"eks_config")," and make a ",(0,o.kt)("inlineCode",{parentName:"p"},"terraform plan"),". No difference in the plan output is expected. Also perform a ",(0,o.kt)("inlineCode",{parentName:"p"},"terraform apply")," just to make sure state the state is updated (might not be needed)."),(0,o.kt)("h3",{id:"update-the-control-plane-using-terraform"},"Update the control plane using Terraform"),(0,o.kt)("p",null,"TBD"),(0,o.kt)("h3",{id:"update-the-nodes"},"Update the nodes"),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"aws-eks/variables/<environment>.tfvars")," Terraform file that corresponds to the actual environment, add a new node group in ",(0,o.kt)("inlineCode",{parentName:"p"},"eks_config"),". The example below shows a node upgrade from ",(0,o.kt)("inlineCode",{parentName:"p"},"1.20")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"1.21")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"standard2")," is the new node group. The value of ",(0,o.kt)("inlineCode",{parentName:"p"},"release_version")," must match an AMI version (preferrably the latest) for the actual Kubernetes version (can be found ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html"},"here"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-terraform"},'eks_config = {\n  kubernetes_version = "1.21"\n  cidr_block         = "10.100.64.0/18"\n  node_groups = [\n    {\n      name            = "standard"\n      release_version = "1.20.4-20210621"\n      min_size        = 3\n      max_size        = 4\n      instance_types  = ["t3.large"]\n    },\n    {\n      name            = "standard2"\n      release_version = "1.21.5-20220123"\n      min_size        = 3\n      max_size        = 4\n      instance_types  = ["t3.large"]\n    },\n  ]\n}\n')),(0,o.kt)("p",null,"When this change is applied, there will be a new set of nodes running the new version added to the cluster. The following command will show all nodes and their versions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-terraform"},"kubectl get nodes\n")),(0,o.kt)("p",null,"Now it is time to drain the old nodes one by one with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl drain <node-name> --ignore-daemonsets --delete-emptydir-data\n")),(0,o.kt)("p",null,"When all nodes are drained, remove the old node group in ",(0,o.kt)("inlineCode",{parentName:"p"},"eks_config"),". From the example above:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-terraform"},'eks_config = {\n  kubernetes_version = "1.21"\n  cidr_block         = "10.100.64.0/18"\n  node_groups = [\n    {\n      name            = "standard2"\n      release_version = "1.21.5-20220123"\n      min_size        = 3\n      max_size        = 4\n      instance_types  = ["t3.large"]\n    },\n  ]\n}\n')),(0,o.kt)("p",null,"When applied, the old nodes are removed. The update is now complete."),(0,o.kt)("h3",{id:"command-examples"},"Command examples"),(0,o.kt)("p",null,"The following AWS CLI commands are an example of an update from 1.20 to 1.21:"),(0,o.kt)("p",null,"Control plane:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"aws eks list-clusters --region eu-west-1\naws eks update-cluster-version --region eu-west-1  --name qa-eks2  --kubernetes-version 1.21\naws eks describe-update --region eu-west-1 --name qa-eks2 --update-id 25b9f04f-0be3-40ca-bc37-aaf841070012\n")),(0,o.kt)("h2",{id:"break-glass"},"Break glass"),(0,o.kt)("p",null,"We are very dependent on azad-proxy to work but if something happens with the\ningress, azad-proxy or the AAD we need to have ways of reaching the cluster:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"aws eks --region eu-west-1 update-kubeconfig --name dev-eks1 --alias dev-eks1 --role-arn arn:aws:iam::111111111111:role/xkf-eu-west-1-dev-eks-admin\n")),(0,o.kt)("h2",{id:"eks-resources"},"EKS resources"),(0,o.kt)("p",null,"To get a quick overview of what is happening in EKS you can look at its ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/awslabs/amazon-eks-ami/blob/master/CHANGELOG.md#changelog"},"changelog"),"."),(0,o.kt)("p",null,"When upgrading node groups you need to correlate with your Kubernetes release, you can find which node group is available to ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html"},"which node group"),"."),(0,o.kt)("p",null,"AWS general ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/security/security-bulletins/"},"security information")),(0,o.kt)("p",null,"Public ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/aws/containers-roadmap"},"containers roadmap"),"."))}c.isMDXComponent=!0}}]);