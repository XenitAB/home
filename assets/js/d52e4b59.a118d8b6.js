"use strict";(self.webpackChunkhome=self.webpackChunkhome||[]).push([[1181],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,v=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?i.createElement(v,a(a({ref:t},c),{},{components:n})):i.createElement(v,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var u=2;u<o;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3829:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var i=n(3117),r=n(102),o=(n(7294),n(3905)),a=n(4996),l=["components"],s={id:"cd",title:"Continuous Delivery"},u=void 0,c={unversionedId:"xks/developer-guide/ci-cd/cd",id:"xks/developer-guide/ci-cd/cd",title:"Continuous Delivery",description:"Continuous Delivery (CD) should be the only way to make changes to running applications in the XKS service.",source:"@site/docs/xks/developer-guide/ci-cd/cd.md",sourceDirName:"xks/developer-guide/ci-cd",slug:"/xks/developer-guide/ci-cd/cd",permalink:"/docs/xks/developer-guide/ci-cd/cd",editUrl:"https://github.com/xenitab/xenitab.github.io/edit/main/docs/xks/developer-guide/ci-cd/cd.md",tags:[],version:"current",frontMatter:{id:"cd",title:"Continuous Delivery"},sidebar:"docs",previous:{title:"Continuous Integration",permalink:"/docs/xks/developer-guide/ci-cd/ci"},next:{title:"GitOps a la XKS",permalink:"/docs/xks/developer-guide/ci-cd/gitops"}},p=[{value:"GitOps",id:"gitops",children:[],level:2},{value:"Azure AD Identity",id:"azure-ad-identity",children:[],level:2},{value:"GitOps Setup",id:"gitops-setup",children:[{value:"Validation for GitOps Status",id:"validation-for-gitops-status",children:[],level:3}],level:2},{value:"Setup CI/CD pipeline",id:"setup-cicd-pipeline",children:[{value:"Enable CI user to push to gitops repo",id:"enable-ci-user-to-push-to-gitops-repo",children:[],level:3},{value:"Service connections",id:"service-connections",children:[],level:3}],level:2}],d={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Continuous Delivery (CD) should be the only way to make changes to running applications in the XKS service.\nThis is to ensure that changes are consistent and tracked in a centralized manner that can be observed by all."),(0,o.kt)("h2",{id:"gitops"},"GitOps"),(0,o.kt)("h2",{id:"azure-ad-identity"},"Azure AD Identity"),(0,o.kt)("h2",{id:"gitops-setup"},"GitOps Setup"),(0,o.kt)("h3",{id:"validation-for-gitops-status"},"Validation for GitOps Status"),(0,o.kt)("p",null,"Important to remember is to setup the Build Validation for the Status pipeline to trigger correctly."),(0,o.kt)("p",null,"That is done:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In Azure devops"),(0,o.kt)("li",{parentName:"ul"},"Project Settings -> Repositories -> 'your-gitops-repo' -> On the 'Policies' tab"),(0,o.kt)("li",{parentName:"ul"},"Select your default branch, usually 'main'. And on the 'Build Validation' section, press the '+' button."),(0,o.kt)("li",{parentName:"ul"},"Select your Status pipeline"),(0,o.kt)("li",{parentName:"ul"},"Enter the following settings:"),(0,o.kt)("li",{parentName:"ul"},"Trigger: Automatic"),(0,o.kt)("li",{parentName:"ul"},"Policy requirement: Required"),(0,o.kt)("li",{parentName:"ul"},"Build expiration: 12h")),(0,o.kt)("p",null,"Also see images below:"),(0,o.kt)("img",{alt:"build-validation",src:(0,a.Z)("img/assets/xks/developer-guide/build-validation.png")}),(0,o.kt)("img",{alt:"build-validation-setup",src:(0,a.Z)("img/assets/xks/developer-guide/build-validation-setup.png")}),(0,o.kt)("img",{alt:"build-validation-final",src:(0,a.Z)("img/assets/xks/developer-guide/build-validation-final.png")}),(0,o.kt)("h2",{id:"setup-cicd-pipeline"},"Setup CI/CD pipeline"),(0,o.kt)("p",null,"At Xenit we have created a CI/CD template to make it easier to get started with GitOps in our case using FluxV2 and the ",(0,o.kt)("a",{parentName:"p",href:"https://toolkit.fluxcd.io/"},"GitOps toolkit"),"."),(0,o.kt)("p",null,"You can find the base for all our Azure DevOps pipelines in our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/XenitAB/azure-devops-templates/tree/main/gitops-v2"},"Azure Devops Templates repo"),"."),(0,o.kt)("p",null,"Follow the example documentation on how to setup your base repo.\nBelow we will explain how to do the manual steps that is needed to get Azure DevOps to enable some of the flows that we are creating."),(0,o.kt)("h3",{id:"enable-ci-user-to-push-to-gitops-repo"},"Enable CI user to push to gitops repo"),(0,o.kt)("p",null,"The core feature of the gitops repo is that one of the pipelines automatically updates the image tag in your repository so Flux will automatically update your deployment in Kubernetes."),(0,o.kt)("p",null,"We have to grant it permissions to do this, sadly manually..."),(0,o.kt)("p",null,'In cases where there are multiple "build services" make sure that you are setting correct permissons the correct one. This appears to be a trial-and-error based mission. Use the ',(0,o.kt)("inlineCode",{parentName:"p"},"Project Collection Build Service ({your organization})"),", not the group ",(0,o.kt)("inlineCode",{parentName:"p"},"Project Collection Build Service Accounts ({your organization})"),"."),(0,o.kt)("img",{alt:"CI access",src:(0,a.Z)("img/assets/xks/developer-guide/gitops_repo_settings.png")}),(0,o.kt)("h3",{id:"service-connections"},"Service connections"),(0,o.kt)("p",null,"To be able to talk from Azure DevOps to AKS using our gitops pipelines we also need to configure service connections to tenant namespace.\nSadly setting up the Service Connections is a manual step."),(0,o.kt)("p",null,"Get the needed config."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'az keyvault secret show --vault-name <vault-name> --name <secret-name> -o tsv --query value\n# Example\naz keyvault secret show --vault-name kv-prod-we-core-1337 --name sp-rg-xks-prod-backend-contributor -o tsv --query value\n\n# The output will look something like this\n{"clientId":"12345","clientSecret":"SoMuchSecret","subscriptionId":"sub-id","tenantId":"tenant-id"}\n')),(0,o.kt)("p",null,"In Azure DevOps:\nProject settings -> Service connections -> New service connection -> Azure Resource Manager -> Service principal (manual)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Subscription Id = subscriptionId"),(0,o.kt)("li",{parentName:"ul"},"Service Principal Id = clientId"),(0,o.kt)("li",{parentName:"ul"},"Service principal key = clientSecret"),(0,o.kt)("li",{parentName:"ul"},"Tenant ID = tenantId"),(0,o.kt)("li",{parentName:"ul"},"Service connection name = random-name")))}m.isMDXComponent=!0}}]);