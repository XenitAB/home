(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{144:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return O}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=o.a.createContext({}),s=function(e){var t=o.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),p=r,O=d["".concat(i,".").concat(p)]||d[p]||b[p]||a;return n?o.a.createElement(O,l(l({ref:t},u),{},{components:n})):o.a.createElement(O,l({ref:t},u))}));function O(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},65:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var r=n(3),o=n(7),a=(n(0),n(144)),i={id:"blue-green",title:"Cluster blue green"},l={unversionedId:"xks/operator-guide/blue-green",id:"xks/operator-guide/blue-green",isDocsHomePage:!1,title:"Cluster blue green",description:"For different reasons you might want to create a completely new cluster, this can be due to many reasons like:",source:"@site/docs/xks/operator-guide/blue-green.md",slug:"/xks/operator-guide/blue-green",permalink:"/docs/xks/operator-guide/blue-green",editUrl:"https://github.com/xenitab/xenitab.github.io/edit/main/docs/xks/operator-guide/blue-green.md",version:"current",sidebar:"docs",previous:{title:"Overview",permalink:"/docs/xks/operator-guide/index"},next:{title:"AWS azure-devops",permalink:"/docs/xks/operator-guide/aws-azdo"}},c=[{value:"Workflow",id:"workflow",children:[]},{value:"DNS migration",id:"dns-migration",children:[{value:"Azure",id:"azure",children:[]}]}],u={rightToc:c};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"For different reasons you might want to create a completely new cluster, this can be due to many reasons like:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Broken cluster"),Object(a.b)("li",{parentName:"ul"},"Test patch the cluster"),Object(a.b)("li",{parentName:"ul"},"Major breaking change")),Object(a.b)("p",null,"Thanks to this XKF support performing blue-green deployment on an entire kubernetes cluster, this is applicable for both Azure and AWS.\nThese docs is intended for both clouds, the main difference is in the naming."),Object(a.b)("p",null,"Today XKS does not support any way of only doing blue green on a specific environment.\nIf you need too perform blue green on QA you should do it in dev and prod as well.\nWe think that the risk is to great that you by mistake would get drift between the modules used in the different clusters would be to great."),Object(a.b)("h2",{id:"workflow"},"Workflow"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"We assume that the workloads on the clusters are stateless and can run multiple instances.")),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Set up a new cluster in the target environment using ",Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/xks/operator-guide/operator-guide"}),"Terraform")),Object(a.b)("li",{parentName:"ol"},"Verify that the new cluster is functioning as intended",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"You ",Object(a.b)("strong",{parentName:"li"},"won't")," be able to verify any ingress"),Object(a.b)("li",{parentName:"ul"},"You ",Object(a.b)("strong",{parentName:"li"},"won't")," be able to use AZAD-proxy in the newly created cluster"))),Object(a.b)("li",{parentName:"ol"},"Change the TXT DNS records over to the newly created cluster"),Object(a.b)("li",{parentName:"ol"},"Verify that the ingress traffic is migrated to the new cluster and it is working as intended"),Object(a.b)("li",{parentName:"ol"},"Destroy the old cluster using terraform")),Object(a.b)("h2",{id:"dns-migration"},"DNS migration"),Object(a.b)("p",null,"You can find a small small script bellow to make the migration of DNS easier.\nAs always use at your own risk and make sure that you understand what the script does."),Object(a.b)("p",null,"Our recommendation is that you migrate one DNS record manually and verify that the ingress and the new cluster is working as intended,\nwhen you know that you can run the script."),Object(a.b)("h3",{id:"azure"},"Azure"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),'ENVIRONMENT="dev"\nOLD_OWNER_ID="${ENVIRONMENT}-aks1"\nNEW_OWNER_ID="${ENVIRONMENT}-aks2"\nRESOURCE_GROUP_NAME="rg-${ENVIRONMENT}-we-aks"\nZONE_NAME="${ENVIRONMENT}.domain.se"\nZONE_RECORDS=$(az network dns record-set txt list -g ${RESOURCE_GROUP_NAME} -z ${ZONE_NAME} | jq -rc \'.[]\')\nZONE_RECORDS_CSV_ARRAY=( $(jq -rc \'. | [.name, (.txtRecords[0].value[0] | @base64)] | join(";")\' <<< "${ZONE_RECORDS}") )\nfor ZONE_RECORD_CSV in "${ZONE_RECORDS_CSV_ARRAY[@]}"; do\n  ZONE_RECORD_NAME=$(awk -F\';\' \'{print $1}\' <<< $ZONE_RECORD_CSV)\n  OLD_ZONE_TXT_VALUE=$(awk -F\';\' \'{print $2}\' <<< $ZONE_RECORD_CSV | base64 -d)\n  if [[ ${OLD_ZONE_TXT_VALUE} =~ "owner=${OLD_OWNER_ID}" ]]; then\n    NEW_ZONE_TXT_VALUE=${OLD_ZONE_TXT_VALUE/owner=${OLD_OWNER_ID}/owner=${NEW_OWNER_ID}}\n    echo Updating external-dns owner of ${ZONE_RECORD_NAME}: ${OLD_OWNER_ID} to ${NEW_OWNER_ID}\n    az network dns record-set txt add-record --resource-group ${RESOURCE_GROUP_NAME} --zone-name ${ZONE_NAME} --record-set-name ${ZONE_RECORD_NAME} --value "${NEW_ZONE_TXT_VALUE}" 1>/dev/null\n    az network dns record-set txt remove-record --resource-group ${RESOURCE_GROUP_NAME} --zone-name ${ZONE_NAME} --record-set-name ${ZONE_RECORD_NAME} --value "${OLD_ZONE_TXT_VALUE}" 1>/dev/null\n  fi\ndone\n')))}s.isMDXComponent=!0}}]);