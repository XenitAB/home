(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{131:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),s=(n(0),n(140)),o={id:"cloud-resources",title:"Cloud Resources"},c={unversionedId:"xks/developer-guide/cloud-resources",id:"xks/developer-guide/cloud-resources",isDocsHomePage:!1,title:"Cloud Resources",description:"Sometimes applications will need to integrate with other cloud resources as they require things like persistent data storage. When working with XKS",source:"@site/docs/xks/developer-guide/cloud-resources.md",slug:"/xks/developer-guide/cloud-resources",permalink:"/docs/xks/developer-guide/cloud-resources",editUrl:"https://github.com/xenitab/xenitab.github.io/edit/main/docs/xks/developer-guide/cloud-resources.md",version:"current",sidebar:"docs",previous:{title:"Flux",permalink:"/docs/xks/developer-guide/flux"},next:{title:"Overview",permalink:"/docs/xks/operator-guide/index"}},i=[{value:"Authentication",id:"authentication",children:[{value:"Azure",id:"azure",children:[]},{value:"AWS",id:"aws",children:[]}]},{value:"Secret Provider",id:"secret-provider",children:[{value:"Azure SPC",id:"azure-spc",children:[]},{value:"AWS SPC",id:"aws-spc",children:[]}]},{value:"Resource Creation",id:"resource-creation",children:[]}],l={rightToc:i};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Sometimes applications will need to integrate with other cloud resources as they require things like persistent data storage. When working with XKS\neach namespace is accompanied by a Azure resource group or a AWS account. This is where cloud resources can be created by each tenant. To keep things\nsimple it may be a good idea to not share these resources across multiple tenants, as one of the tenants has to own the resource. Instead look at\nother options like exposing an API inside the cluster instead."),Object(s.b)("h2",{id:"authentication"},"Authentication"),Object(s.b)("p",null,"As many things the authentication methods differ when running XKS in Azure and AWS. This is because the APIs and underlying authentication methods\ndiffer greatly. It is important to take this into consideration when reading these documentation."),Object(s.b)("h3",{id:"azure"},"Azure"),Object(s.b)("p",null,"The reccomended way to authenticate towards Azure in XKS is to make use of ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Azure/aad-pod-identity"}),"AAD Pod Identity")," which runs\ninside the cluster. AAD Pod Identity allows Pods within the cluster to use ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview"}),"managed identities"),"\nto authenticate towards Azure. This removes the need for static credentials that have to be passed to the Pods. It works by intercepting API requests\nbefore the leave the cluster and will attach the correct credential based on the Pod source of the request."),Object(s.b)("p",null,"Each tenant namespace comes preconfigured with an ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://azure.github.io/aad-pod-identity/docs/concepts/azureidentity/"}),"AzureIdentity")," and\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://azure.github.io/aad-pod-identity/docs/concepts/azureidentitybinding/"}),"AzureIdentityBinding"),". These have been setup so that the identity has\naccess to the tenants resource group. All that has to be done to enable the managed identity is to add the label ",Object(s.b)("inlineCode",{parentName:"p"},"foo")," to the Pod. The preconfigured\nAzureIdentity has a labelselector which expects the label to have the same value as the namespace name."),Object(s.b)("p",null,"This example will deploy a Pod with the Azure CLI so that you can test access to the Azure API."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"apiVersion: v1\nkind: Pod\nmetadata:\n  name: msi-test\n  labels:\n    aadpodidbinding: ${NAMESPACE_NAME}\nspec:\n  containers:\n  - name: msi-test\n    image: mcr.microsoft.com/azure-cli\n    tty: true\n    volumeMounts:\n      - name: az-cli\n        mountPath: /root/.azure\n  volumes:\n    - name: az-cli\n      emptyDir: {}\n\n")),Object(s.b)("p",null,"After the Pod has started you can execute a shell in the Pod and verify that the managed identity is working."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"az login --identity\naz account show\n")),Object(s.b)("h4",{id:"sdk-configuration"},"SDK Configuration"),Object(s.b)("p",null,"A more realistic scenario is an internally developed application needs to access an Azure resources. In these cases the best solution is to use the\nlanguage specific SDKs which will most of the time support MSI credentials. Below are examples for how to create a client using MSI credentials that\ncan interact with Azure storage account blobs."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"}," Golang ")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-golang"}),'package main\n\nimport (\n    "time"\n\n  "github.com/Azure/go-autorest/autorest/azure/auth"\n    blob "github.com/Azure/azure-storage-blob-go/azblob"\n)\n\nfunc main() {\n  msiConfig := auth.NewMSIConfig()\n\n  spt, err := msiConfig.ServicePrincipalToken()\n  if err != nil {\n    return nil, err\n  }\n  if err := spt.Refresh(); err != nil {\n    return nil, err\n  }\n\n  tc, err := blob.NewTokenCredential(spt.Token().AccessToken, func(tc blob.TokenCredential) time.Duration {\n    err := spt.Refresh()\n    if err != nil {\n      return 30 * time.Second\n    }\n    tc.SetToken(spt.Token().AccessToken)\n    return spt.Token().Expires().Sub(time.Now().Add(2 * time.Minute))\n  }), nil\n}\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"}," C# ")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c#"}),'using Azure;\nusing Azure.Identity;\nusing Azure.Storage.Blobs;\n\nasync static Task CreateBlockBlobAsync(string accountName, string containerName, string blobName)\n{\n    string containerEndpoint = string.Format("https://{0}.blob.core.windows.net/{1}",\n                                                accountName,\n                                                containerName);\n    BlobContainerClient containerClient = new BlobContainerClient(new Uri(containerEndpoint),\n                                                                    new DefaultAzureCredential());\n}\n')),Object(s.b)("h4",{id:"limiting-permissions"},"Limiting Permissions"),Object(s.b)("p",null,"TBD"),Object(s.b)("h3",{id:"aws"},"AWS"),Object(s.b)("p",null,"When authenticating towards AWS in XKS we recommend that you utilize ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/setting-up-enable-IAM.html"}),"IRSA"),"."),Object(s.b)("p",null,"You create a IAM rule that matches the minimal access that you need to use the resource.\nAnnotate the serviceAccount with the IAM arn."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-serviceAccount.yaml"}),"apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: arn:aws:iam::111111111111:role/iam-name\n  name: application1\n")),Object(s.b)("p",null,"In your deployment use the serviceAccount."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-pod.yaml"}),'apiVersion: v1\nkind: Pod\nmetadata:\n  name: aws-cli\nspec:\n  serviceAccountName: application1\n  containers:\n  - name: msi-test\n      image: amazon/aws-cli\n      command: ["sh"]\n      stdin: true\n      tty: true\n')),Object(s.b)("p",null,"After the Pod has started you can execute a shell in the Pod and verify that the managed identity is working."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"aws sts get-caller-identity\n")),Object(s.b)("h2",{id:"secret-provider"},"Secret Provider"),Object(s.b)("p",null,"If all you need is a secret for example to be able to talk to a database XKS utilize ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://secrets-store-csi-driver.sigs.k8s.io/providers.html"}),"secret store csi driver"),".\nBoth AWS and Azure have done there implementation of secret store csi driver where it talks to it's API to get data from there key store solutions."),Object(s.b)("h3",{id:"azure-spc"},"Azure SPC"),Object(s.b)("p",null,"TBD"),Object(s.b)("h3",{id:"aws-spc"},"AWS SPC"),Object(s.b)("p",null,"As mentioned before in AWS we use IRSA to connect pods to the AWS API.\nYou will have to create a IAM rule that gives you read access to the secret solution that you use.\nIn AWS case it supports both ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://aws.amazon.com/secrets-manager/"}),"AWS Secret Manager")," and ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html"}),"AWS System Manager Parameter Store"),"."),Object(s.b)("p",null,"Example IAM policy document, this might have been changed always look at the latest ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/mediaconnect/latest/ug/iam-policy-examples-asm-secrets.html"}),"docs"),".\nThe IAM rule only contains the policy not a attachment of it."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-iam.tf"}),'data "aws_iam_policy_document" "db_connection_string" {\n  statement {\n    effect = "Allow"\n    actions = [\n      "secretsmanager:ListSecrets",\n    ]\n    resources = ["*"]\n  }\n  statement {\n    effect = "Allow"\n    actions = [\n      "secretsmanager:GetSecretValue",\n      "secretsmanager:DescribeSecret",\n      "secretsmanager:GetResourcePolicy",\n      "secretsmanager:ListSecretVersionIds"\n    ]\n    resources = ["arn:aws:secretsmanager:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:secret:application/application1/connectionstring"]\n  }\n}\n')),Object(s.b)("p",null,Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-access.html"}),"IAM docs")," for AWS System Manager Parameter Store."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ssm-iam.tf"}),'data "aws_iam_policy_document" "db_connection_string" {\n  statement {\n    effect = "Allow"\n    actions = [\n      "ssm:DescribeParameters",\n    ]\n    resources = ["*"]\n  }\n  statement {\n    effect = "Allow"\n    actions = [\n      "ssm:GetParameter",\n      "ssm:GetParameters",\n    ]\n    resources = ["arn:aws:ssm:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:parameter/db-*"]\n  }\n}\n')),Object(s.b)("p",null,"This is a example secret provider class for ",Object(s.b)("strong",{parentName:"p"},"Secret Manager")," and ",Object(s.b)("strong",{parentName:"p"},"System Manager Parameter"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-secretproviderclass.yaml"}),'apiVersion: secrets-st`ore.csi.x-k8s.io/v1alpha1\nkind: SecretProviderClass\nmetadata:\n  name: spc1\n  namespace: tenant1\nspec:\n  provider: aws\n  parameters:\n    objects: |\n        # Path to your secret\n      - objectName: "application/application1/connectionstring"\n        objectType: "secretsmanager"\n        # Notice the usage of objectAlias\n        objectAlias: "connectionstring"\n      - objectName: "db-test"\n        objectType: "ssmparameter"\n  secretObjects:\n    - data:\n        - key: password\n          objectName: "connectionstring"\n      secretName: connectionstring\n      type: Opaque\n    - data:\n        - key: password\n          objectName: db-test\n      secretName: db-test\n      type: Opaque\n')),Object(s.b)("p",null,"A service account using the IAM rule that we have created."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sa.yaml"}),"apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: arn:aws:iam::111111111111:role/iam-name\n  name: application1\n")),Object(s.b)("p",null,"A deployment using the service account and the csi driver."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-deployment.yaml"}),'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: application1\nspec:\n  selector:\n    matchLabels:\n      app: application1\n  template:\n    metadata:\n      annotations:\n        secret.reloader.stakater.com/reload: "db-test"\n      labels:\n        app: application1\n    spec:\n      serviceAccountName: application1\n      containers:\n        - name: api\n          image: alpine:latest\n          env:\n            - name: ConnectionStrings\n              valueFrom:\n                secretKeyRef:\n                  key: password\n                  name: db-test\n          volumeMounts:\n            - name: secret-store\n              mountPath: "/mnt/secrets-store"\n              readOnly: true\n      volumes:\n        - name: secret-store\n          csi:\n            driver: secrets-store.csi.k8s.io\n            readOnly: true\n            volumeAttributes:\n              secretProviderClass: spc1\n')),Object(s.b)("h2",{id:"resource-creation"},"Resource Creation"),Object(s.b)("p",null,"TBD"))}u.isMDXComponent=!0},140:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var a=n(0),r=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,b=p["".concat(o,".").concat(m)]||p[m]||d[m]||s;return n?r.a.createElement(b,c(c({ref:t},l),{},{components:n})):r.a.createElement(b,c({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<s;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);