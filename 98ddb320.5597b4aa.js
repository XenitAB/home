(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{119:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return s}));var r=a(0),n=a.n(r);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=n.a.createContext({}),p=function(e){var t=n.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},m=function(e){var t=p(e.components);return n.a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},u=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,i=b(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,s=m["".concat(o,".").concat(u)]||m[u]||d[u]||l;return a?n.a.createElement(s,c(c({ref:t},i),{},{components:a})):n.a.createElement(s,c({ref:t},i))}));function s(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=u;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var i=2;i<l;i++)o[i]=a[i];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},143:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/terraform-architecture-c640744bb489e813c3d841591a0ec6c0.jpg"},96:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return b})),a.d(t,"default",(function(){return p}));var r=a(3),n=a(7),l=(a(0),a(119)),o={title:"Terraform (Docker)",slug:"/azure-devops-templates/terraform-docker",custom_edit_url:"https://github.com/XenitAB/azure-devops-templates/edit/main/terraform-docker/README.md"},c={unversionedId:"azure-devops-templates/terraform-docker",id:"azure-devops-templates/terraform-docker",isDocsHomePage:!1,title:"Terraform (Docker)",description:"The Terraform templates (using Docker) are used to run Terraform in a dev->qa->prod environment promotion flow.",source:"@site/docs/azure-devops-templates/terraform-docker.md",slug:"/azure-devops-templates/terraform-docker",permalink:"/docs/azure-devops-templates/terraform-docker",editUrl:"https://github.com/XenitAB/azure-devops-templates/edit/main/terraform-docker/README.md",version:"current",sidebar:"docs",previous:{title:"Terraform",permalink:"/docs/azure-devops-templates/terraform"}},b=[{value:"Architecture",id:"architecture",children:[]},{value:"Template Format",id:"template-format",children:[]},{value:"Plan",id:"plan",children:[]},{value:"Apply",id:"apply",children:[]},{value:"Examples",id:"examples",children:[{value:"Pipeline",id:"pipeline",children:[]},{value:"Makefile",id:"makefile",children:[]}]}],i={rightToc:b};function p(e){var t=e.components,o=Object(n.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},i,o,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"The Terraform templates (using Docker) are used to run Terraform in a ",Object(l.b)("inlineCode",{parentName:"p"},"dev->qa->prod")," environment promotion flow."),Object(l.b)("h2",{id:"architecture"},"Architecture"),Object(l.b)("p",null,Object(l.b)("img",{alt:"terraform-architecture",src:a(143).default})),Object(l.b)("h2",{id:"template-format"},"Template Format"),Object(l.b)("p",null,"Parameter names that end with ",Object(l.b)("inlineCode",{parentName:"p"},"Template")," will be templated before they are used. They are templted with the ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#format"}),"format command"),".\nThe format command is passed the environment name, which can be placed in the string."),Object(l.b)("h2",{id:"plan"},"Plan"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Default"),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"poolNameTemplate"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'""')),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Name of pool to use in template format.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"sourceBranch"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'"refs/heads/master"')),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Source branch to limit image builds to.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"environments"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"[{name: dev}, {name: qa}, {name: prod}]")),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Environments that should be deployed to.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"azureSubscriptionTemplate"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'""')),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Name of Azure subscription in template format.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"terraformFolder"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'""')),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Path to Terraform directory.")))),Object(l.b)("h2",{id:"apply"},"Apply"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Default"),Object(l.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"poolNameTemplate"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'""')),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Name of pool to use in template format.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"sourceBranch"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'"refs/heads/master"')),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Source branch to limit image builds to.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"azureSubscriptionTemplate"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'""')),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Name of Azure subscription in template format.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"terraformFolder"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},'""')),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Path to Terraform directory.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"environments"),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"[{name: dev, deployTags: false}, {name: qa, deployTags: true}, {name: prod, deployTags: true}]")),Object(l.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Environments that should be deployed to.")))),Object(l.b)("h2",{id:"examples"},"Examples"),Object(l.b)("h3",{id:"pipeline"},"Pipeline"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),'name: $(Build.BuildId)\n\ntrigger:\n  batch: true\n  branches:\n    include:\n      - master\n  paths:\n    include:\n      - TF_FOLDER_NAME\n\nresources:\n  repositories:\n    - repository: templates\n      type: git\n      name: PROJ/azure-devops-templates\n      ref: resf/tags/2020.12.1\n\nstages:\n  - template: terraform-docker/plan/main.yaml@templates\n    parameters:\n      azureSubscriptionTemplate: "SUB"\n      poolNameTemplate: "POOL"\n      terraformFolder: "TF_FOLDER_NAME"\n  - template: terraform-docker/apply/main.yaml@templates\n    parameters:\n      azureSubscriptionTemplate: "SUB"\n      poolNameTemplate: "POOL"\n      terraformFolder: "TF_FOLDER_NAME"\n')),Object(l.b)("h3",{id:"makefile"},"Makefile"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-makefile"}),'SHELL:=/bin/bash\n\nSUFFIX="tfstate<4 random digits>"\nIMAGE="ghcr.io/xenitab/github-actions/tools:2020.12.3"\nENV?=""\nDIR?=""\nOPA_BLAST_RADIUS := $(if $(OPA_BLAST_RADIUS), $(OPA_BLAST_RADIUS), 50)\nAZURE_CONFIG_DIR := $(if $(AZURE_CONFIG_DIR), $(AZURE_CONFIG_DIR), "$${HOME}/.azure")\n\ncheck:\nifeq ($(ENV),"")\n    echo "Need to set ENV"\n    exit 1\nendif\nifeq ($(DIR),"")\n    echo "Need to set DIR"\n    exit 1\nendif\n\nplan: check\n    echo Print working dir: $${PWD}\n    docker run --entrypoint "/opt/terraform.sh" -v $${PWD}/$(DIR)/.terraform/$(ENV).env:/tmp/$(ENV).env -v $(AZURE_CONFIG_DIR):/home/tools/.azure -v $${PWD}/$(DIR):/tmp/$(DIR) -v $${PWD}/global.tfvars:/tmp/global.tfvars $(IMAGE) plan $(DIR) $(ENV) $(SUFFIX) $(OPA_BLAST_RADIUS)\n\napply: check\n    docker run --entrypoint "/opt/terraform.sh" -v $${PWD}/$(DIR)/.terraform/$(ENV).env:/tmp/$(ENV).env -v $(AZURE_CONFIG_DIR):/home/tools/.azure -v $${PWD}/$(DIR):/tmp/$(DIR) -v $${PWD}/global.tfvars:/tmp/global.tfvars $(IMAGE) apply $(DIR) $(ENV) $(SUFFIX)\n\nprepare: check\n    docker run --entrypoint "/opt/terraform.sh" -v $${PWD}/$(DIR)/.terraform/$(ENV).env:/tmp/$(ENV).env -v $(AZURE_CONFIG_DIR):/home/tools/.azure -v $${PWD}/$(DIR):/tmp/$(DIR) -v $${PWD}/global.tfvars:/tmp/global.tfvars $(IMAGE) prepare $(DIR) $(ENV) $(SUFFIX)\n')))}p.isMDXComponent=!0}}]);